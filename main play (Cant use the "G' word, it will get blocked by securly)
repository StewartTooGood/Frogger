<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Simple Frogger</title>
  <style>
    body {
      margin: 0;
      background-color: #222;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
    }

    canvas {
      background-color: #88e;
      border: 3px solid white;
    }
  </style>
</head>
<body>
<canvas id="game" width="400" height="500"></canvas>

<script>
  const canvas = document.getElementById("game");
  const ctx = canvas.getContext("2d");

  const frog = {
    x: 200,
    y: 460,
    size: 20,
    color: "lime"
  };

  const lanes = [
    { y: 100, speed: 2, direction: 1, cars: [] },
    { y: 160, speed: 3, direction: -1, cars: [] },
    { y: 220, speed: 2.5, direction: 1, cars: [] },
    { y: 280, speed: 3.5, direction: -1, cars: [] },
  ];

  function drawFrog() {
    ctx.fillStyle = frog.color;
    ctx.fillRect(frog.x, frog.y, frog.size, frog.size);
  }

  function drawCar(car) {
    ctx.fillStyle = "red";
    ctx.fillRect(car.x, car.y, car.width, car.height);
  }

  function updateCars() {
    lanes.forEach(lane => {
      lane.cars.forEach(car => {
        car.x += lane.speed * lane.direction;

        if (car.x < -50 && lane.direction === -1) {
          car.x = 400;
        } else if (car.x > 450 && lane.direction === 1) {
          car.x = -50;
        }

        // Collision detection
        if (
          frog.x < car.x + car.width &&
          frog.x + frog.size > car.x &&
          frog.y < car.y + car.height &&
          frog.y + frog.size > car.y
        ) {
          resetGame();
        }
      });
    });
  }

  function resetGame() {
    frog.x = 200;
    frog.y = 460;
  }

  function drawLanes() {
    lanes.forEach(lane => {
      lane.cars.forEach(drawCar);
    });
  }

  function gameLoop() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    drawFrog();
    drawLanes();
    updateCars();

    if (frog.y <= 20) {
      alert("ðŸŽ‰ You Win!");
      resetGame();
    }

    requestAnimationFrame(gameLoop);
  }

  // Create cars in each lane
  lanes.forEach(lane => {
    for (let i = 0; i < 3; i++) {
      lane.cars.push({
        x: i * 150,
        y: lane.y,
        width: 50,
        height: 20
      });
    }
  });

  // Move frog with arrow keys
  document.addEventListener("keydown", (e) => {
    if (e.key === "ArrowUp") frog.y -= 40;
    if (e.key === "ArrowDown") frog.y += 40;
    if (e.key === "ArrowLeft") frog.x -= 40;
    if (e.key === "ArrowRight") frog.x += 40;

    // Keep frog inside bounds
    frog.x = Math.max(0, Math.min(frog.x, canvas.width - frog.size));
    frog.y = Math.max(0, Math.min(frog.y, canvas.height - frog.size));
  });

  gameLoop();
</script>
</body>
</html>
